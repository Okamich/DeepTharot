// –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –º–∏—Ä–∞
class EventSystem {
    constructor(game) {
        this.game = game;
        this.locations = [
            {
                name: "–õ–µ—Å–Ω–∞—è —Ç—Ä–æ–ø–∞",
                description: "–í—ã –∏–¥–µ—Ç–µ –ø–æ –∑–∞—Ä–æ—Å—à–µ–π –ª–µ—Å–Ω–æ–π —Ç—Ä–æ–ø–∏–Ω–∫–µ. –í–æ–∫—Ä—É–≥ —à–µ–ª–µ—Å—Ç—è—Ç –ª–∏—Å—Ç—å—è, –∏ –¥–æ–Ω–æ—Å–∏—Ç—Å—è –ø–µ–Ω–∏–µ –ø—Ç–∏—Ü.",
                icon: "üå≤"
            },
            {
                name: "–ì–æ—Ä–Ω–∞—è —Ç—Ä–æ–ø–∞", 
                description: "–ö–∞–º–µ–Ω–∏—Å—Ç–∞—è —Ç—Ä–æ–ø–∞ –≤–µ–¥–µ—Ç –≤–≤–µ—Ä—Ö –ø–æ —Å–∫–ª–æ–Ω—É –≥–æ—Ä—ã. –í–æ–∑–¥—É—Ö —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–æ—Ö–ª–∞–¥–Ω–µ–µ.",
                icon: "‚õ∞Ô∏è"
            },
            {
                name: "–†–µ—á–Ω–æ–π –±–µ—Ä–µ–≥",
                description: "–í—ã –≤—ã—à–ª–∏ –∫ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∫–µ. –í–æ–¥–∞ —á–∏—Å—Ç–∞—è –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è, –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –±–µ—Ä–µ–≥—É –≤–∏–¥–Ω–µ—é—Ç—Å—è –æ–≥–Ω–∏.",
                icon: "üåä"
            },
            {
                name: "–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –¥–µ—Ä–µ–≤–Ω—è",
                description: "–†–∞–∑—Ä—É—à–µ–Ω–Ω—ã–µ –¥–æ–º–∞ –∏ –∑–∞—Ä–æ—Å—à–∏–µ —É–ª–∏—Ü—ã. –ö–æ–≥–¥–∞-—Ç–æ –∑–¥–µ—Å—å –∫–∏–ø–µ–ª–∞ –∂–∏–∑–Ω—å, —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –≤–µ—Ç–µ—Ä –≥—É–ª—è–µ—Ç –º–µ–∂–¥—É —Ä—É–∏–Ω.",
                icon: "üèöÔ∏è"
            },
            {
                name: "–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ª–µ—Å",
                description: "–î—Ä–µ–≤–Ω–∏–π –ª–µ—Å —Å –≤—ã—Å–æ–∫–∏–º–∏ –¥–µ—Ä–µ–≤—å—è–º–∏, —Å–∫–≤–æ–∑—å –∫—Ä–æ–Ω—ã –∫–æ—Ç–æ—Ä—ã—Ö barely –ø—Ä–æ–±–∏–≤–∞–µ—Ç—Å—è —Å–≤–µ—Ç. –í–æ–∑–¥—É—Ö –Ω–∞–ø–æ–ª–Ω–µ–Ω –º–∞–≥–∏–µ–π.",
                icon: "üå≥"
            }
        ];
    }

    changeLocation() {
        const location = this.locations[Math.floor(Math.random() * this.locations.length)];
        document.getElementById('locationImage').textContent = location.icon;
        document.getElementById('locationTitle').textContent = location.name;
        document.getElementById('locationDescription').textContent = location.description;
    }

    triggerRandomEvent() {
        const events = [
            this.findGoldEvent.bind(this),
            this.findItemEvent.bind(this),
            this.healingEvent.bind(this),
            this.experienceEvent.bind(this),
            this.discoveryEvent.bind(this),
            this.startBattleEvent.bind(this)
        ];
        
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        const randomEvent = events[Math.floor(Math.random() * events.length)];
        randomEvent();
    }

    findGoldEvent() {
        const goldAmount = 10 + Math.floor(Math.random() * 20) + this.game.currentLevel * 5;
        this.game.player.gold += goldAmount;
        
        this.showEventResult(
            "–ù–∞–π–¥–µ–Ω –∫–ª–∞–¥!",
            "–í—ã –Ω–∞—à–ª–∏ —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–π –∫–ª–∞–¥ –ø–æ–¥ —Å—Ç–∞—Ä—ã–º –¥–µ—Ä–µ–≤–æ–º.",
            [{ type: "gold", amount: goldAmount }]
        );
        
        this.game.addLogEntry(`–í—ã –Ω–∞—à–ª–∏ ${goldAmount} –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç!`, "gold");
    }

    findItemEvent() {
        const itemTypes = ['weapon', 'armor', 'accessory'];
        const itemType = itemTypes[Math.floor(Math.random() * itemTypes.length)];
        const item = new Item(itemType, this.game.currentLevel);
        this.game.player.addItem(item);
        
        this.showEventResult(
            "–ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç!",
            "–í—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ —Å—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏.",
            [{ type: "item", item: item }]
        );
        
        this.game.addLogEntry(`–ü–æ–ª—É—á–µ–Ω–æ: ${item.name}`, "info");
    }

    healingEvent() {
        const healAmount = 10 + Math.floor(Math.random() * 20);
        const oldHealth = this.game.player.health;
        this.game.player.health = Math.min(this.game.player.health + healAmount, this.game.player.maxHealth);
        const actualHeal = this.game.player.health - oldHealth;
        
        this.showEventResult(
            "–¶–µ–ª–µ–±–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫",
            "–í—ã –Ω–∞—à–ª–∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å —Ü–µ–ª–µ–±–Ω–æ–π –≤–æ–¥–æ–π.",
            [{ type: "heal", amount: actualHeal }]
        );
        
        this.game.addLogEntry(`–í—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ ${actualHeal} –∑–¥–æ—Ä–æ–≤—å—è!`, "heal");
    }

    experienceEvent() {
        const expAmount = 15 + Math.floor(Math.random() * 25) + this.game.currentLevel * 5;
        const levelsGained = this.game.player.gainExp(expAmount);
        
        this.showEventResult(
            "–î—Ä–µ–≤–Ω–∏–µ –∑–Ω–∞–Ω–∏—è",
            "–í—ã –Ω–∞—à–ª–∏ –¥—Ä–µ–≤–Ω–∏–µ —Ä—É–∏–Ω—ã –∏ –ø–æ—á–µ—Ä–ø–Ω—É–ª–∏ –∑–Ω–∞–Ω–∏—è –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ.",
            [{ type: "exp", amount: expAmount }]
        );
        
        if (levelsGained > 0) {
            this.game.addLogEntry(`–ü–æ–ª—É—á–µ–Ω–æ ${expAmount} –æ–ø—ã—Ç–∞! –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω!`, "levelup");
        } else {
            this.game.addLogEntry(`–ü–æ–ª—É—á–µ–Ω–æ ${expAmount} –æ–ø—ã—Ç–∞!`, "exp");
        }
    }

    discoveryEvent() {
        const discoveries = [
            {
                title: "–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–ª—Ç–∞—Ä—å",
                description: "–í—ã –Ω–∞—à–ª–∏ –¥—Ä–µ–≤–Ω–∏–π –∞–ª—Ç–∞—Ä—å, –∏–∑–ª—É—á–∞—é—â–∏–π –º–∞–≥–∏—á–µ—Å–∫—É—é —ç–Ω–µ—Ä–≥–∏—é.",
                rewards: [
                    { type: "exp", amount: 25 },
                    { type: "gold", amount: 15 }
                ]
            },
            {
                title: "–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –ª–∞–≤–∫–∞ –∞–ª—Ö–∏–º–∏–∫–∞",
                description: "–í —Ä–∞–∑—Ä—É—à–µ–Ω–Ω–æ–π –ª–∞–≤–∫–µ –≤—ã –Ω–∞—à–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –∑–µ–ª–∏–π.",
                rewards: [
                    { type: "heal", amount: 20 },
                    { type: "gold", amount: 10 }
                ]
            },
            {
                title: "–ì–Ω–µ–∑–¥–æ –≥–∏–≥–∞–Ω—Ç—Å–∫–æ–π –ø—Ç–∏—Ü—ã",
                description: "–í –≥–Ω–µ–∑–¥–µ –≤—ã –Ω–∞—à–ª–∏ –±–ª–µ—Å—Ç—è—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ç–∏—Ü–∞ —Å–æ–±–∏—Ä–∞–ª–∞.",
                rewards: [
                    { type: "gold", amount: 30 }
                ]
            }
        ];
        
        const discovery = discoveries[Math.floor(Math.random() * discoveries.length)];
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        discovery.rewards.forEach(reward => {
            if (reward.type === "gold") {
                this.game.player.gold += reward.amount;
            } else if (reward.type === "exp") {
                this.game.player.gainExp(reward.amount);
            } else if (reward.type === "heal") {
                this.game.player.health = Math.min(this.game.player.health + reward.amount, this.game.player.maxHealth);
            }
        });
        
        this.showEventResult(
            discovery.title,
            discovery.description,
            discovery.rewards
        );
        
        this.game.addLogEntry(`–û—Ç–∫—Ä—ã—Ç–∏–µ: ${discovery.title}`, "event");
    }

    startBattleEvent() {
        this.game.addLogEntry("–í–Ω–µ–∑–∞–ø–Ω–æ –≤–∞—Å –∞—Ç–∞–∫—É—é—Ç –≤—Ä–∞–≥–∏!", "damage");
        this.game.startBattle();
    }

    showEventResult(title, description, rewards) {
        const eventResult = document.getElementById('eventResult');
        const eventTitle = document.getElementById('eventTitle');
        const eventDescription = document.getElementById('eventDescription');
        const eventRewards = document.getElementById('eventRewards');
        
        eventTitle.textContent = title;
        eventDescription.textContent = description;
        eventRewards.innerHTML = '';
        
        rewards.forEach(reward => {
            const rewardElement = document.createElement('div');
            rewardElement.className = 'reward-item';
            
            let icon = '';
            let text = '';
            
            switch (reward.type) {
                case 'gold':
                    icon = 'üí∞';
                    text = `+${reward.amount} –∑–æ–ª–æ—Ç–∞`;
                    break;
                case 'exp':
                    icon = '‚≠ê';
                    text = `+${reward.amount} –æ–ø—ã—Ç–∞`;
                    break;
                case 'heal':
                    icon = '‚ù§Ô∏è';
                    text = `+${reward.amount} –∑–¥–æ—Ä–æ–≤—å—è`;
                    break;
                case 'item':
                    icon = 'üéÅ';
                    text = reward.item.name;
                    break;
            }
            
            rewardElement.innerHTML = `
                <span class="reward-icon">${icon}</span>
                <span>${text}</span>
            `;
            
            eventRewards.appendChild(rewardElement);
        });
        
        eventResult.style.display = 'block';
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            eventResult.style.display = 'none';
            this.changeLocation();
        }, 3000);
    }
}
